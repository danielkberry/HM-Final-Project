?read.csv 
?read.table
head(vacant_raw)
str(vacant_raw)
head(vacant_raw$X.7)
str(vacant_raw)
str(vacant_raw)
str(vacant_raw)
install.packages('rgeos')
install.packages('rgeos')
?getwd
head(blocks_raw)
library(sp)
?SpatialPolygonsDataFrame
?Polygon
tmp <- blocks_raw[1,1]
tmp
?%>%
tmp %>% split('(')
tmp %>% substr(16, -3)
tmp %>% substr(16)
tmp %>% substr(16, 20)
tmp %>% str_sub(17, -3)
tmp %>% str_sub(17, -4)
tmp %>% str_sub(17, -4) %>% split(',')
tmp %>% str_sub(17, -4) %>% str_split(',')
tmp %>% str_sub(17, -4) %>% str_split(', ')
tmp %>% str_sub(17, -4) %>% str_split(', ') %>% str_split(' ')
tmp %>% str_sub(17, -4) %>% str_split(', ')
lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), str_split(' '))
lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' '))
lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) as.numeric(str_split(s, ' ')))
unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) as.numeric(str_split(s, ' '))))
unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))
as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' '))))
matrix(as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))), ncol = 2)
as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))))
as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' '))))
as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))))
matrix(as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))), ncol = 2)
matrix(as.numeric(unlist(lapply(tmp %>% str_sub(17, -4) %>% str_split(', '), function(s) str_split(s, ' ')))), ncol = 2, byrow = TRUE)
mp.to.matrix(blocks_raw[1,1])
mp.to.matrix(blocks_raw[2,1])
mp.to.matrix(blocks_raw[3,1])
mp.to.matrix(blocks_raw[4,1])
tmp_p <- mp.to.matrix(blocks_raw[1,1])
Polygon(tmp_p)
?gCentroid
class(tmp_p)
gCentroid(tmp_p)
?sp
coordinates(Polygon(tmp_p))
gCentroid(Polygon(tmp_p))
?calcCentroid
install.packages('rgdal')
library(rgdal)
?calcCentroid
install.packages('PBSmapping')
?calcCentroid
library(PBSmapping)
install.packages('maptools')
library(maptools)
?calcCentroid
SpatialPolygons(Polygon(tmp_p))
SpatialPolygons(list(Polygon(tmp_p)))
?slot
SpatialPolygons(list(Polygon(slot(tmp_p, 'Polygons'))))
tmp_p
compute.center(tmp_p)
warnings
warnings()
centers
head(centers)
head(vacant_raw)
nrow(vacant_raw)
nrow(blocks_raw)
head(blocks_raw)
head(blocks_raw$GEOID10)
as.character(head(blocks_raw))
as.character(head(blocks_raw$GEOID10))
install.packages('fuzzyjoin')
?geo_join
library(dplyr)
?semi_join
head(vacant_raw)
head(blocks_raw)
head(vacant_raw)
blocks_raw[1:100,]
nrow(blocks_raw[1:100,])
?distm
str(tmp)
head(blocks_raw[,c('Longitude','Latitude')])
head(vacant_raw[,c('Longitude','Latitude')])
is.na(head(vacant_raw[,c('Longitude','Latitude')]))
apply(is.na(head(vacant_raw[,c('Longitude','Latitude')])), 1, any)
nrow(vacant_raw[!apply(is.na(vacant_raw[,c('Longitude', 'Latitude')]), 1, any)])
nrow(vacant_raw[!apply(is.na(vacant_raw[,c('Longitude', 'Latitude')]), 1, any)])
names(vacant_raw)
sum(apply(is.na(vacant_raw[,c('Longitude','Latitude')]), 1, any))
nrow(vacant_raw)
str(tmp)
?distHaversine
mean(tmp)
mean(tmp, na.rm = T)
mean(dist_mat, na.rm = T)
head(counts)
mean(counts)
mean(counts, na.rm = T)
ls()
rm("dist_mat")
gc()
quit()
gc()
names(vacant_raw)
vacant_raw[,c('Longitude')]
vacant_raw[,c('Longitude', 'Latitude')]
nrow(vacant_raw)
gc()
t1
blocks_raw[1:1000, c('Longitude', 'Latitude')]
as.matrix(blocks_raw[1:1000, c('Longitude', 'Latitude')])
t`1`
t1
t1 <- as.matrix(blocks_raw[1:10000, c('Longitude', 'Latitude')])
t2 <- as.matrix(vacant_raw[1:10000, c('Longitude', 'Latitude')])
system.time(dist_mat <- spDists(t1, t2))
system.time(dist_mat <- spDists(t1, t2, longlat = TRUE))
rm(list=ls())
gc()
names(vacant_raw)
vacant_raw[,c('Longitude', 'Latitude')
]
rm(list=ls())
gc()
gc()
gc()
vcov(model)
vcov(model)
print(vcov(model))
?vcov
?vcov.lm
?stats::vcov.lm
cov2cor(vcov(model))
car::vif(model)
?car::vif
?lm
?lm.fit
View(cov2cor(vcov(model)))
summary(model)
A
B
vcov(model)
cov2cor(vcov(model))
nrow(vacant_raw)
nrow(blocks_raw)
nrow(vacant_counts)
str(blocks_raw)
head(population)
head(as.character(blocks_raw$GEOID10))
names(blocks_raw)
names(population)
nrow(blocks_raw)
str(block_data)
str(data.shape)
data.shape
summary(data.shape)
attr(data.shape)
attributes(data.shape)
str(data.shape_df)
?readOGR
class(data.shape)
?SpatialPolygonsDataFrame
names(data.shape)
data.class[,'PRI_NEIGH']
data.shape[,'PRI_NEIGH']
data.shape@data$SEC_NEIGH
data.shape@data$PRI_NEIGH
head(data.shape_df)
plot(data.shape)
data.shape@data
data.shape@polygons
data.shape@polygons[[1]]
data.shape@polygons[[1]]@coords
data.shape@polygons[[1]]@polygons
data.shape@polygons[[1]]@polygon
data.shape@polygons[[1]]
data.shape@polygons[[1]][[1]]
data.shape@polygons[[1]]@Polygons
?over
?df
str(block_data)
head(t)
summary(t)
summary(t)
head(t)
nrow(t)
table(t$PRI_NEIGH)
head(block_data)
head(block_data)
rm(list=ls())
str(vacant_counts)
head(blocks_raw)
head(block_data)
head(block_data)
head(public_health)
mean(block_data$store_counts == 0)
setdiff(public_health$Community.Area.Name, block_data$Neighborhood)
setdiff(block_data$Neighborhood, public_health$Community.Area.Name)
head(socioeconomic)
?spDists
?readOGR
str(dist_mat3)
str(groceries)
mean(groceries$SQUARE.FEET <= 10000)
?spDists
mean(store_counts_new)
mean(store_counts_new <= 1)
mean(block_data$desert)
mean(block_data$store_counts)
mean(block_data$store_counts <= 1)
mean(block_data$store_counts < 1)
mean(block_data$desert)
str(block_data)
sum(block_data[block_data$desert, 'TOTAL.POPULATION'])
sum(block_data[block_data$desert, 'TOTAL.POPULATION'], na.rm = TRUE)
sum(block_data[~block_data$desert, 'TOTAL.POPULATION'], na.rm = TRUE)
sum(block_data[!block_data$desert, 'TOTAL.POPULATION'], na.rm = TRUE)
nrow(t3)
nrow(groceries)
nrow(groceries[groceries$SQUARE.FEET >= 10000,])
nrow(groceries[groceries$SQUARE.FEET >= 2500,])
head(buffer)
head(buffer)
lapply(1:2, buffer)
str(buffers)
str(dist_mat3_mi)
mean(store_counts_new)
mean(store_counts_new < 1)
grep('liquor', tolower(groceries$STORE.NAME))
grep('liquor', tolower(groceries$STORE.NAME), invert = TRUE)
mean(store_counts_new)
mean(store_counts_new < 1)
nrow(groceries)
str(dist_mat3_mi)
str(buffers)
sum(blocks_raw[blocks_raw$store_counts < 1,'TOTAL.POPULATION'])
blocks_raw[blocks_raw$store_counts < 1,'TOTAL.POPULATION']
blocks_raw$store_counts
blocks_raw$store_counts < 1
str(blocks_raw)
sum(block_data[block_data$store_counts == 0, 'TOTAL.POPULATION'])
sum(block_data[block_data$store_counts == 0, 'TOTAL.POPULATION'], na.rm = T)
cbind(groceries$SQUARE.FEET, buffer)
mean(block_data$desert)
sum(block_raw[block_data$desert,'TOTAL.POPULATION'])
sum(block_data[block_data$desert,'TOTAL.POPULATION'])
sum(block_data[block_data$desert,'TOTAL.POPULATION'], na.rm = T)
str(nearest_supermarket)
?stat_density2d
rm(list=ls())
mean(block_data$desert)
mean(block_data[block_data$desert, 'TOTAL.POPULATION'])
mean(block_data[block_data$desert, 'TOTAL.POPULATION'], na.rm = T)
sum(block_data[block_data$desert, 'TOTAL.POPULATION'], na.rm = T)
str(race)
str(race)
unique(race$X)
unique(public_health$Community.Area.Name)
unique(block_data$Neighborhood)
setdiff(block_data$Neighborhood, public_health$Community.Area.Name)
t(setdiff(block_data$Neighborhood, public_health$Community.Area.Name))
t(t(setdiff(block_data$Neighborhood, public_health$Community.Area.Name)))
sum(block_data$Neighborhood == 'Garfield Park')
sum(block_data$Neighborhood == 'Garfield Park', na.rm = T)
total
warnings()
head(as.character(block_data$Neighborhood))
table(block_data$Neighborhood)
t(t(setdiff(block_data$Neighborhood, public_health$Community.Area.Name)))
t(t(setdiff(block_data$Neighborhood, public_health$Community.Area.Name)))
unique(public_health$Community.Area.Name)
unique(block_data$Neighborhood)
length(public_health$Community.Area.Name[public_health$Community.Area.Name == 'West Garfield Park'])
length(public_health$Community.Area.Name[public_health$Community.Area.Name == 'East Garfield Park'])
public_health$Community.Area.Name[public_health$Community.Area.Name == 'East Garfield Park']
table(public_health$Community.Area.Name)
public_health$Community.Area.Name[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park')]
public_health[,public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park')]
public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),]
apply(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),], 1, mean)
apply(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),], 2, mean)
apply(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),], 2, function(s) mean(s, na.rm = TRUE)
)
warnings()
public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),]
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),])
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),-c('Community.Area', 'Community.Area.Name')])
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),- c('Community.Area', 'Community.Area.Name')])
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'),c('Community.Area', 'Community.Area.Name')])
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'), !(names(public_health) %in% c('Community.Area', 'Community.Area.Name'))])
str(public_health)
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'), !(names(public_health) %in% c('Community.Area', 'Community.Area.Name'))])
public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'), !(names(public_health) %in% c('Community.Area', 'Community.Area.Name'))]
str(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'), !(names(public_health) %in% c('Community.Area', 'Community.Area.Name'))])
colMeans(public_health[public_health$Community.Area.Name %in% c('East Garfield Park', 'West Garfield Park'), !(names(public_health) %in% c('Community.Area', 'Community.Area.Name'))])
str(tmp)
str(public_health)
public_health[88,]
public_health[88,]
public_health[88,]
str(socioeconomic)
tmp
tmp
tmp
tmp
str(socioeconomic)
str(public_health)
install.packages('unmarked')
install.packages('AICcmodavg')
library(unmarked)
library(AICcmodavg)
?parboot
unmarked::parboot
unmarked:::parboot
?unmarked::parboot
parboot
getAnywhere('parboot')
getAnywhere('unmarked::parboot')
getAnywhere('parboot')
getMethod()
showMethods('parboot')
getMethod('parboot','unmarkedFit')
quit()
)
length(unique(block_data$Neighborhood))
length(unique(socioeconomic$COMMUNITY.AREA.NAME))
setdiff(public_health$Community.Area.Name, socioeconomic$COMMUNITY.AREA.NAME)
length(unique(race$Community.Area))
length(unique(public_health$Community.Area.Name))
setdiff(socioeconomic$COMMUNITY.AREA.NAME, public_health$Community.Area.Name)
nrow(socioeconomic)
tail(socioeconomic)
unique(socioeconomic$COMMUNITY.AREA.NAME)
tail(socioeconomic)
tail(socioeconomic)
tail(socioeconomic)
setdiff(socioeconomic$COMMUNITY.AREA.NAME, public_health$Community.Area.Name)
setdiff(socioeconomic$COMMUNITY.AREA.NAME, public_health$Community.Area.Name)
setdiff(public_health$Community.Area.Name,socioeconomic$COMMUNITY.AREA.NAME)
setdiff(race$X, public_health$Community.Area.Name)
names(block_d)
names(block_data)
rm(list=ls())
str(all_data)
rm(list=ls())
names(race)
str(race)
to_rep 
summary(race$NHW)
sum(is.na(race$NHW))
sum(is.na(race$NHB))
sum(is.na(race$NHAM))
sum(is.na(race$NHAS))
sum(is.na(race$NHOTHER))
sum(is.na(race$HISP))
sum(is.na(race$Multiple.Race..))
sum(is.na(race$TOTAL))
sum(is.na(race$Community.Area))
head(race)
rm(list=ls())
str(all_data)
mean(complete.cases(all_data))
?apply
lapply(all_data, function(var) mean(is.na(all_data[,var])))
pct_missing <- lapply(all_data, function(var) mean(is.na(var)))
pct_missing
all_data[is.na(all_data$NHW),]
table(race$Neighborhood)
names(race)
nrow(race)
race[78]
race[78,]
rm(list=ls())
pct_missing
str(race)
rm(list=ls())
quit()
rm(list=ls())
rm(list=ls())
str(race)
rm(list=ls())
str(race)
tmp <- read.csv('race.csv', stringsAsFactors = FALSE)
str(tmp)
rm(list=ls())
str(race)
str(race)
pct_missing
all_data[is.na(all_data$NHW),]
t <- all_data[is.na(all_data$NHW),]
summary(t)
names(t)
table(t$Neighborhood)
table(t$Neighborhood, useNA = 'ifany')
table(block_data$Neighborhood, useNA = 'ifany')
sum(t$TOTAL.POPULATION)
sum(t$TOTAL.POPULATION, na.rm = T)
install.packages('ggmap')
?get_map
?ggmap
str(data.shape_df)
?fortify
?rgeos::fortify
?rgdal::fortify
quit()
?fortify
summary(data.shape)
quit()
sum(is.na(block_data$Neighborhood))
mean(is.na(block_data$Neighborhood))
head(missing)
str(block_data)
sum(block_data[missing, 'TOTAL.POPULATION'])
sum(block_data[missing, 'TOTAL.POPULATION'], na.rm = T)
!missing
str(t1)
missing
miss_ID <- 20
head(dist_mat)
str(dist_mat)
min(dist_mat)
which.min(dist_mat)
sum(is.na(block_data$Neighborhood))
sum(is.na(block_data$Neighborhood))
pct_missing
)
?geom_smooth
sum(is.na(block_data$NHB_p))
block_data$NHB_p
str(block_data)
sum(is.na(plot_data$NHB_p))
str(plot_data)
quit()
str(all_data)
str(all_data)
summary(cp)
summary(np)
anova(np)
summary(pp)
summary(np)
str(all_data)
summary(mlm)
install.packages('glmmLasso')
g
q
install.packages('glmmLasso', repos = 'https://cloud.r-project.org/'))
install.packages('glmmLasso', repos = 'https://cloud.r-project.org/')
nrow(all_data)
nrow(model_data)
summary(pp)
model_data['NHB']
str(model_data_scale)
t <- scale(model_data['NHB'])
str(t)
t <- scale(model_data)
str(as.numeric(scale(model_data['NHB'])))
potential_covariates
summary(best_model)
?parlapply
install.packages('parallel')
1
raw
rm(list=ls())
quit()
